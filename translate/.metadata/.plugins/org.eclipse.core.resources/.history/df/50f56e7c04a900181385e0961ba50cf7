package com.translate.utils;

import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.util.EntityUtils;

public class HttpClientUtil {
	private static String DEFAULT_CHARSET = "UTF-8";
	/**
	 * Socket连接超时时间(ms)
	 */
	private static int SOCKET_TIMEOUT = 60000;
	/**
	 * connect 超时时间(ms)
	 */
	private static int CONNECT_TIMEOUT = 60000;
	/**
	 * 最大连接数
	 */
	private static int CONNTIONPOOL_MAX_TOTAL = 1000;
	/**
	 * 路由最大连接数
	 */
	private static int CONNTIONPOOL_DEFAULT_MAX_PER_ROUTE = 1000;
	private static CloseableHttpClient httpClient;
	private synchronized static CloseableHttpClient getHttpClient() {
		if (httpClient != null) {
			return httpClient;
		}

		try {

			PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
			cm.setMaxTotal(CONNTIONPOOL_MAX_TOTAL);
			cm.setDefaultMaxPerRoute(CONNTIONPOOL_DEFAULT_MAX_PER_ROUTE);

			RequestConfig defaultRequestConfig = RequestConfig.custom()
					.setSocketTimeout(SOCKET_TIMEOUT)
					.setConnectTimeout(CONNECT_TIMEOUT).build();

			httpClient = HttpClients.custom().setConnectionManager(cm)
					.setDefaultRequestConfig(defaultRequestConfig).build();
			return httpClient;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public static String doPost(String url, String content, String contentType)
			throws Exception {
		String result = null;

		HttpEntity resEntity = null;
		CloseableHttpResponse response = null;
		try {
			HttpPost post = new HttpPost(url);
			if (contentType != null) {
				post.setHeader("Content-Type", contentType);
			}
			post.setEntity(new StringEntity(content, DEFAULT_CHARSET));

			CloseableHttpClient client = getHttpClient();
			if (client == null || post == null) {
				log.info("client is null");
				return null;
			}
			response = client.execute(post);
			resEntity = response.getEntity();
			result = null == resEntity ? "" : EntityUtils.toString(resEntity,
					DEFAULT_CHARSET);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resEntity != null) {
					EntityUtils.consume(resEntity);
				}
				if (response != null) {
					response.close();
				}

			} catch (IOException e) {
				e.printStackTrace();
			}

		}
		return result;
	}
}
